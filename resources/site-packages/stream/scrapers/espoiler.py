from stream import plugin
from stream.scrapers import scraper
from stream.ga import tracked
from stream.caching import cached_route
from stream.utils import ensure_fanart
from stream.library import library_context
from stream.utils import url_get
from bs4 import BeautifulSoup
import re
import requests
import json

BASE_URL = "http://www.espoilertv.com/"
HEADERS = {
    "Referer": BASE_URL,
}

payload = {
        'mail':plugin.get_setting("espoiler_user"),
        'pass':plugin.get_setting("espoiler_pass")
    }
s = requests.Session()
p = s.post(BASE_URL+'serv/asincrono/logOn.php', data=payload)
print p.content


@plugin.route("/espoiler/marcar/<idEpisodio>/<accion>")
def espoiler_marcar_visto(idEpisodio, accion):
    import xbmc
    r = s.post(BASE_URL+"api/v1/mitv", {'accion':accion, 'idEpisodio':idEpisodio} )
    print r.content
    xbmc.executebuiltin('Container.Refresh')

@scraper("Espoiler TV")
@plugin.route("/espoiler")
def espoiler_index():
    print "espoilerTV!"
    plugin.set_content("episodes")

    yield {
        "label": ">> Calendario",
        "path": plugin.url_for("espoiler_calendario", dia=0),
        'is_playable': False
    }

    r = s.get(BASE_URL + 'api/v1/mitv?grupo=porVer')
    mitv = json.loads(r.content)

    for serie in mitv['series']:
        print serie['titulo']
        print plugin.url_for("espoiler_ver_fuentes", capitulo=serie['idEpisodio'])
        item = {}
        item['label'] = '%s (S%sE%s)' % (serie['titulo'], serie['temporada'].zfill(2), serie['episodio'].zfill(2))
        item['path'] = plugin.url_for("espoiler_ver_serie", titulo=serie['titBase'])
        item['is_playable'] = False
        item['replace_context_menu'] = True
        yield item

@plugin.route("/espoiler/serie/<titulo>")
def espoiler_ver_serie(titulo):
    print "espoiler_ver_serie %s" % titulo
    plugin.set_content("episodes")
    html_data = s.get( BASE_URL+"ficha/"+titulo )
    soup = BeautifulSoup(html_data.content, "html5lib")
    for node in soup.findAll('div',attrs={'class': re.compile(r".*\bepisodio\b.*")}):
        print node
        if node.div.input.has_attr('value'):
            #print node.div.input['value']
            divTitulo = node.findAll('div',attrs={'class': re.compile(r".*\btitulo\b.*")})[0].get_text()

            visto = node.findAll('button',attrs={'class': re.compile(r".*\bvisto\b.*")})[0]['data-visto']
            playcount = 0 if visto=='no' else 2
            print visto + " " + str(playcount)
            contextMenu = ("Marcar como visto", "XBMC.RunPlugin(%s)" % plugin.url_for("espoiler_marcar_visto", idEpisodio=node.div.input['value'], accion='visto' ))
            if playcount > 0:
                contextMenu = ("Marcar como NO visto", "XBMC.RunPlugin(%s)" % plugin.url_for("espoiler_marcar_visto", idEpisodio=node.div.input['value'], accion='noVisto' ))
            yield {
                'label': '%s - %s' % (node['id'],divTitulo),
                'path':  plugin.url_for("espoiler_ver_fuentes", capitulo=node.div.input['value']),
                'is_playable': False,
                'context_menu': [ contextMenu ],
                'info':{
                    "episode": "la madre que lo pario",
                    'playcount': playcount
                }
            }


@plugin.route("/espoiler/fuentes/<capitulo>")
def espoiler_ver_fuentes(capitulo):
    r = s.get(BASE_URL+"serv/asincrono/enlaces.php?id="+capitulo)
    info = json.loads(r.content)
    """
    yield {
        'label': '%s (S%sE%s)' % (info['titSerie'], info['temporada'].zfill(2), info['episodio'].zfill(2)),
        'path':  plugin.url_for("espoiler_ver_fuentes", capitulo ),
        'is_playable':False
    }
    """
    for fuente in info['vid']:
        yield {
            'label': '%s (%s,%s)' % (fuente['dominio'], fuente['descargas'], fuente['reportes']),
            'path':  plugin.url_for("espoiler_play", url=fuente['url']),
            'is_playable': False
        }

@plugin.route("/espoiler/play/<url>")
def espoiler_play( url ):
    print "espoiler_play %s" % url
    html_data = url_get( url, headers=HEADERS)
    soup = BeautifulSoup(html_data, "html5lib")
    def filter_Magnet(el):
        return el.has_attr('href') and 'magnet:' in el['href']

    nodes = soup.findAll(filter_Magnet)
    for node in nodes:
        yield {
            'label': '%s' % node['href'],
            'path':  plugin.url_for("play", uri=node['href']),
            'is_playable': True
        }



@plugin.route("/espoiler/calendario/<dia>")
@cached_route(ttl=3000, content_type="episodes")
def espoiler_calendario(dia=0):
    from datetime import date,timedelta
    dia = int(dia)
    hoy = date.today()
    un_dia = timedelta(days=1)
    hoy = hoy + un_dia*dia

    yield {
        'label': 'espoilerTV Inicio' ,
        'path':  plugin.url_for("espoiler_index"),
        'is_playable': False
    }
    yield {
        'label': '<<< ' + (hoy-un_dia).isoformat() ,
        'path':  plugin.url_for("espoiler_calendario", dia=dia-1),
        'is_playable': False
    }
    r = s.get( BASE_URL+"api/v1/calendario?fecha="+hoy.isoformat() )
    dayCalendar = json.loads(r.content)

    for serie in dayCalendar['series']:
        yield {
            'label': '%s (S%sE%s)' % (serie['titulo'], serie['temporada'].zfill(2), serie['episodio'].zfill(2)),
            'path': plugin.url_for("espoiler_ver_serie", titulo=serie['titBase']),
            'is_playable': False
        }

    yield {
        'label': '>>> '+(hoy+un_dia).isoformat() ,
        'path':  plugin.url_for("espoiler_calendario", dia=dia+1),
        'is_playable': False
    }

